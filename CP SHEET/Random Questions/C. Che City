#include <bits/stdc++.h>
using namespace std;

long long getTotalComb(int r, vector<int> &distance){
    set<int> monuments;
    long long res = 0;
    for(int i = 0, j = 0; i < distance.size(); i++){
        // Add monuments
        monuments.insert(distance[i]);
        
        //If valid range formed, move j till it becomes invalid again
        while(*(prev(monuments.end())) - (*monuments.begin()) > r){
            monuments.erase(distance[j]);
            j++;
        }
        
        //Now j is at the FIRST element where distance[i] - distance[j] <= r
        //ans = [0, j) => valid answers in range [0, j), including 0 & excluding j, i.e. = j
        res += 1LL * j;
    }
    return res;
}


int bs(int dist, vector<int> &distance){
    //first idx, where distance[idx] < dist
    int l = 0, r = distance.size(), idx = -1;
    while(l <= r){
        int mid = (l + r) / 2;
        if(distance[mid] < dist){
            idx = mid;
            l = mid + 1;
        }
        else{
            r = mid - 1;
        }
    }
    return idx;
}

long long getTotalCombBS(int r, vector<int> &distance){
    //for each distance[i], bs to find the first distance, distance[j] < (distance - r).
    //Now all distances from [0, j], are valid combination for current distance[i]
    long long res = 0;
    for(int i = 0; i < distance.size(); i++){
        int validDistance = distance[i] - r;
        if(validDistance > 0){
            int idx = bs(validDistance, distance);
            if(idx != -1){
                res += 1LL * idx + 1;
            }
        }
    }
    return res;
}

int main() {
	// your code goes here
    int n, r;
    cin >> n >> r;
    vector<int> distance(n);
    for(int i = 0; i < n; i++){
        cin >> distance[i];
    }
    cout << getTotalCombBS(r, distance) << '\n';
}
